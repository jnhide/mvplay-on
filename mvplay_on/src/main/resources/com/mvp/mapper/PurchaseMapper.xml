<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mvp.mapper.PurchaseMapper">

	<!-- 개별 구매(소장용) purchase 테이블에 등록 -->

	<insert id="enrollPurchase_1">
		insert into purchase(userId, movieId, buyPrice,
		startDate, expiredDate)
		values(#{userId}, #{movieId}, #{buyPrice},
		sysdate, sysdate+3650)
	</insert>

	<!-- 개별 구매(대여용) purchase 테이블에 등록 -->
	<insert id="enrollPurchase_2">
		insert into purchase(userId, movieId, rentalPrice,
		startDate, expiredDate) values(#{userId}, #{movieId}, #{rentalPrice},
		sysdate, sysdate + 7)
	</insert>


	<!-- 구매 영화 정보 갖고 오기 -->
	<select id="getBuyInfo" resultType="com.mvp.model.PurchaseViewVO">
		select p.userId, p.movieId,m.movieTitle,
		p.buyPrice,p.rentalPrice,p.startDate, p.expiredDate from purchase p Join movie m on p.movieId = m.movieId 
		where p.id = #{id}
	</select>

	<!-- 구독 정보 -->
	<select id="getSubscriptionInfo" parameterType="int"
		resultType="com.mvp.model.SubscribtionVO">
		SELECT * FROM subscription WHERE Id = #{Id}
	</select>

	<!-- 구독 정보 디비 저장 -->
	<insert id="enrollSubscription"
		parameterType="com.mvp.model.SubscribtionVO">
		INSERT INTO subscribePayment (startDate, expiredDate,
		SubscribePrice,
		userId, goods)
		VALUES (#{startDate}, #{expiredDate},
		#{SubscribePrice}, #{userId},
		#{goods})
	</insert>

	<!-- 구매 취소/ -->
	<update id="refund">
     <![CDATA[
            UPDATE purchase 
            SET expiredDate = startDate - INTERVAL '1' DAY
            WHERE sysdate <= startDate + INTERVAL '3' DAY
            AND id = #{id}
        ]]>
	</update>

	<!-- 환불 테이블 등록 -->
	<insert id="enrollRefund">
		insert into refund( id, refundPrice, userId,
		refundDate,refundStatus) values( #{id}, #{refundPrice}, #{userId},
		sysdate, '환불신청' )
	</insert>

	<!-- 구매한 영화 목록보기(pList) -->
	<select id="getPList" resultType="com.mvp.model.PurchaseViewVO">
		SELECT m.movieId, m.movieTitle, m.poster, p.id, p.userId, p.buyPrice, p.rentalPrice, p.startDate
		FROM
		movie m
		JOIN purchase p ON m.movieId = p.movieId
		WHERE p.userId = #{userId}
	</select>
	
	<select id="getRefund" resultType="com.mvp.model.PurchaseViewVO">
		<![CDATA[
			SELECT  id, userId, movieId,
				(SELECT movieTitle FROM movie WHERE movie.movieId=purchase.movieId) movieTitle,
			startDate, expiredDate,rentalPrice, buyPrice,
				(SELECT refundId FROM refund where refund.id=purchase.id)refundId,
            	(SELECT refundStatus FROM refund where refund.id=purchase.id)refundStatus,
            	(SELECT refundDate FROM refund where refund.id=purchase.id)refundDate
			FROM purchase where id=#{id}
		]]>    
	
	</select>
	
	<!-- 중복구매 방지(구매자 확인) -->
	 <select id="checkPurchase" parameterType="com.mvp.model.PurchaseVO" resultType="int">
        select count(*) from purchase
        where userId = #{userId} and  movieId = #{movieId}
    </select>
	
	


</mapper>