<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.mvp.mapper.MovieMapper">

	<!-- 개별 구매-->
	<select id="movieBuyDetail" resultType="com.mvp.model.MovieVO">
		 select movieId, poster, movieTitle, movieDate, cate1, cate2, buyPrice, rentalPrice from movie where movieId = #{movieId} 
	</select> 
  	
  	<!-- 영화 리스트 -->
  	<select id="getMovieList" resultType="com.mvp.model.MovieVO">
		select m.movieId, m.movieTitle, m.poster, m.movieContent, 
		m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, 
		m.rentalPrice, m.movieUrl, ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
		from movie m
		LEFT JOIN (
		SELECT movieId, AVG(rating) AS average_rating
		FROM rating GROUP BY movieId
		)avg_rating ON m.movieId = avg_rating.movieId
		
		<![CDATA[
		where sysdate <= movieDate + (INTERVAL '1' YEAR) 
		]]> <!-- 최근 90일 개봉 영화만 출력 -->
		
		order by movieDate desc
  	</select>
  	 
  	<!-- 영화 조회 -->
	<select id="movieGetDetail" resultType="com.mvp.model.MovieVO">
		<!--  -->
		SELECT m.movieId, m.movieTitle, m.poster, m.movieContent,
		m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, m.rentalPrice,
		m.movieUrl, ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
        FROM movie m LEFT JOIN (
        SELECT movieId, AVG(rating) AS average_rating
        FROM rating
        GROUP BY movieId
        ) avg_rating ON m.movieId = avg_rating.movieId
        WHERE m.movieId = #{movieId}
        
        
	</select>  
	
	<select id="getMovieIdTitle" resultType="com.mvp.model.MovieVO">
		select movieId, movieTitle from movie
		where movieId = #{movieId}
	</select>
	
	<!-- 영화검색 -->
	<select id="searchMovie" resultType="com.mvp.model.MovieVO">
	
	    <![CDATA[
	          select * from (
	              select /*+INDEX_DESC(movie SYS_C008625) */ 
	                  rownum as rn, movieId, movieTitle, cate1, movieDate, movieCheck, poster
	              from movie 
	              where
	    ]]>         
	            <if test="keyword != null">
	                movieTitle like '%'||#{keyword}||'%' and
	            </if>
	    <![CDATA[        
	             rownum <= #{pageNum}*#{amount}
	            )
	        where rn > (#{pageNum} - 1) * #{amount}
	    ]]>
	</select>
	
	<!-- 영화페이징 -->
	<select id="getMovieTotal" resultType="int">
          select count(*) from movie

          <if test="keyword != null">
             where movieTitle like '%' || #{keyword} || '%'
          </if>
      </select>
	
	<!-- 영화 랭킹(바뀌는 걸 보기 위해 임시로 별점 순으로 작성함) -->
	<!-- 바꿀땐 마지막줄 by와 desc 사이에 정렬 기준 넣으면 되요~ -->
  	<select id="getMovieRank" resultType="com.mvp.model.MovieVO">
		select m.movieId, m.movieTitle, m.poster, m.movieContent, 
		m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, 
		m.rentalPrice, m.movieUrl,ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
		from movie m
		LEFT JOIN (
		SELECT movieId, AVG(rating) AS average_rating
		FROM rating GROUP BY movieId
		)avg_rating ON m.movieId = avg_rating.movieId
		order by rating desc
  	</select>
  	
  
  	<select id="selectCate1" resultType="com.mvp.model.MovieVO">
  		SELECT DISTINCT cate1 FROM movie
  	</select>
  	
  	<!-- 구매/대여 영화 최신순 정렬 -->
  	<select id="getPurchaseMovieList" resultType="com.mvp.model.MovieVO">
		select m.movieId, m.movieTitle, m.poster, m.movieContent, 
			m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, 
			m.rentalPrice, m.movieUrl, ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
		from movie m
			LEFT JOIN (
			SELECT movieId, AVG(rating) AS average_rating
			FROM rating GROUP BY movieId
			)avg_rating ON m.movieId = avg_rating.movieId 
	        where m.movieCheck = 1 or m.movieCheck = 2 or m.movieCheck = 3
			order by movieDate desc
  	</select>
  	
  	<!-- 구매/대여 영화 랭킹순 정렬 -->
  	<select id="getPurchaseMovieRank" resultType="com.mvp.model.MovieVO">
		select m.movieId, m.movieTitle, m.poster, m.movieContent, 
		m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, 
		m.rentalPrice, m.movieUrl, ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
		from movie m
		LEFT JOIN (
		SELECT movieId, AVG(rating) AS average_rating
		FROM rating GROUP BY movieId
		)avg_rating ON m.movieId = avg_rating.movieId
		where m.movieCheck = 1 or m.movieCheck = 2 or m.movieCheck = 3
		order by rating desc
  	</select>
  	
  	<!-- 구독 영화 최신순 정렬 -->
  	<select id="getSubscribeMovieList" resultType="com.mvp.model.MovieVO">
		select m.movieId, m.movieTitle, m.poster, m.movieContent, 
			m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, 
			m.rentalPrice, m.movieUrl, ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
		from movie m
			LEFT JOIN (
			SELECT movieId, AVG(rating) AS average_rating
			FROM rating GROUP BY movieId
			)avg_rating ON m.movieId = avg_rating.movieId 
	        where m.movieCheck =0
			order by movieDate desc
  	</select>
  	
  	<!-- 구매/대여 영화 랭킹순 정렬 -->
  	<select id="getSubscribeMovieRank" resultType="com.mvp.model.MovieVO">
		select m.movieId, m.movieTitle, m.poster, m.movieContent, 
		m.movieDate, m.movieCheck, m.cate1, m.cate2, m.buyPrice, 
		m.rentalPrice, m.movieUrl, ROUND(NVL(avg_rating.average_rating, 0), 2) AS rating
		from movie m
		LEFT JOIN (
		SELECT movieId, AVG(rating) AS average_rating
		FROM rating GROUP BY movieId
		)avg_rating ON m.movieId = avg_rating.movieId
		where m.movieCheck = 0
		order by rating desc
  	</select>
  	
  	
  	
  	
  </mapper>